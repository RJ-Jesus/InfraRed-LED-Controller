// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/23/2015 20:42:30"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    C4Rom
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module C4Rom_vlg_sample_tst(
	iClk,
	iEn,
	iRst,
	sampler_tx
);
input  iClk;
input  iEn;
input  iRst;
output sampler_tx;

reg sample;
time current_time;
always @(iClk or iEn or iRst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module C4Rom_vlg_check_tst (
	oData,
	sampler_rx
);
input [15:0] oData;
input sampler_rx;

reg [15:0] oData_expected;

reg [15:0] oData_prev;

reg [15:0] oData_expected_prev;

reg [15:0] last_oData_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	oData_prev = oData;
end

// update expected /o prevs

always @(trigger)
begin
	oData_expected_prev = oData_expected;
end


// expected oData[ 15 ]
initial
begin
	oData_expected[15] = 1'bX;
end 
// expected oData[ 14 ]
initial
begin
	oData_expected[14] = 1'bX;
end 
// expected oData[ 13 ]
initial
begin
	oData_expected[13] = 1'bX;
end 
// expected oData[ 12 ]
initial
begin
	oData_expected[12] = 1'bX;
end 
// expected oData[ 11 ]
initial
begin
	oData_expected[11] = 1'bX;
end 
// expected oData[ 10 ]
initial
begin
	oData_expected[10] = 1'bX;
end 
// expected oData[ 9 ]
initial
begin
	oData_expected[9] = 1'bX;
end 
// expected oData[ 8 ]
initial
begin
	oData_expected[8] = 1'bX;
end 
// expected oData[ 7 ]
initial
begin
	oData_expected[7] = 1'bX;
end 
// expected oData[ 6 ]
initial
begin
	oData_expected[6] = 1'bX;
end 
// expected oData[ 5 ]
initial
begin
	oData_expected[5] = 1'bX;
end 
// expected oData[ 4 ]
initial
begin
	oData_expected[4] = 1'bX;
end 
// expected oData[ 3 ]
initial
begin
	oData_expected[3] = 1'bX;
end 
// expected oData[ 2 ]
initial
begin
	oData_expected[2] = 1'bX;
end 
// expected oData[ 1 ]
initial
begin
	oData_expected[1] = 1'bX;
end 
// expected oData[ 0 ]
initial
begin
	oData_expected[0] = 1'bX;
end 
// generate trigger
always @(oData_expected or oData)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected oData = %b | ",oData_expected_prev);
	$display("| real oData = %b | ",oData_prev);
`endif
	if (
		( oData_expected_prev[0] !== 1'bx ) && ( oData_prev[0] !== oData_expected_prev[0] )
		&& ((oData_expected_prev[0] !== last_oData_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oData_exp[0] = oData_expected_prev[0];
	end
	if (
		( oData_expected_prev[1] !== 1'bx ) && ( oData_prev[1] !== oData_expected_prev[1] )
		&& ((oData_expected_prev[1] !== last_oData_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oData_exp[1] = oData_expected_prev[1];
	end
	if (
		( oData_expected_prev[2] !== 1'bx ) && ( oData_prev[2] !== oData_expected_prev[2] )
		&& ((oData_expected_prev[2] !== last_oData_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oData_exp[2] = oData_expected_prev[2];
	end
	if (
		( oData_expected_prev[3] !== 1'bx ) && ( oData_prev[3] !== oData_expected_prev[3] )
		&& ((oData_expected_prev[3] !== last_oData_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oData_exp[3] = oData_expected_prev[3];
	end
	if (
		( oData_expected_prev[4] !== 1'bx ) && ( oData_prev[4] !== oData_expected_prev[4] )
		&& ((oData_expected_prev[4] !== last_oData_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oData_exp[4] = oData_expected_prev[4];
	end
	if (
		( oData_expected_prev[5] !== 1'bx ) && ( oData_prev[5] !== oData_expected_prev[5] )
		&& ((oData_expected_prev[5] !== last_oData_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oData_exp[5] = oData_expected_prev[5];
	end
	if (
		( oData_expected_prev[6] !== 1'bx ) && ( oData_prev[6] !== oData_expected_prev[6] )
		&& ((oData_expected_prev[6] !== last_oData_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oData_exp[6] = oData_expected_prev[6];
	end
	if (
		( oData_expected_prev[7] !== 1'bx ) && ( oData_prev[7] !== oData_expected_prev[7] )
		&& ((oData_expected_prev[7] !== last_oData_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oData_exp[7] = oData_expected_prev[7];
	end
	if (
		( oData_expected_prev[8] !== 1'bx ) && ( oData_prev[8] !== oData_expected_prev[8] )
		&& ((oData_expected_prev[8] !== last_oData_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oData_exp[8] = oData_expected_prev[8];
	end
	if (
		( oData_expected_prev[9] !== 1'bx ) && ( oData_prev[9] !== oData_expected_prev[9] )
		&& ((oData_expected_prev[9] !== last_oData_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oData_exp[9] = oData_expected_prev[9];
	end
	if (
		( oData_expected_prev[10] !== 1'bx ) && ( oData_prev[10] !== oData_expected_prev[10] )
		&& ((oData_expected_prev[10] !== last_oData_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oData_exp[10] = oData_expected_prev[10];
	end
	if (
		( oData_expected_prev[11] !== 1'bx ) && ( oData_prev[11] !== oData_expected_prev[11] )
		&& ((oData_expected_prev[11] !== last_oData_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oData_exp[11] = oData_expected_prev[11];
	end
	if (
		( oData_expected_prev[12] !== 1'bx ) && ( oData_prev[12] !== oData_expected_prev[12] )
		&& ((oData_expected_prev[12] !== last_oData_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oData_exp[12] = oData_expected_prev[12];
	end
	if (
		( oData_expected_prev[13] !== 1'bx ) && ( oData_prev[13] !== oData_expected_prev[13] )
		&& ((oData_expected_prev[13] !== last_oData_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oData_exp[13] = oData_expected_prev[13];
	end
	if (
		( oData_expected_prev[14] !== 1'bx ) && ( oData_prev[14] !== oData_expected_prev[14] )
		&& ((oData_expected_prev[14] !== last_oData_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oData_exp[14] = oData_expected_prev[14];
	end
	if (
		( oData_expected_prev[15] !== 1'bx ) && ( oData_prev[15] !== oData_expected_prev[15] )
		&& ((oData_expected_prev[15] !== last_oData_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oData_exp[15] = oData_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module C4Rom_vlg_vec_tst();
// constants                                           
// general purpose registers
reg iClk;
reg iEn;
reg iRst;
// wires                                               
wire [15:0] oData;

wire sampler;                             

// assign statements (if any)                          
C4Rom i1 (
// port map - connection between master ports and signals/registers   
	.iClk(iClk),
	.iEn(iEn),
	.iRst(iRst),
	.oData(oData)
);

// iClk
always
begin
	iClk = 1'b0;
	iClk = #10000 1'b1;
	#10000;
end 

// iEn
initial
begin
	iEn = 1'b0;
	iEn = #100000 1'b1;
	iEn = #40000 1'b0;
	iEn = #400000 1'b1;
	iEn = #40000 1'b0;
	iEn = #220000 1'b1;
	iEn = #40000 1'b0;
end 

// iRst
initial
begin
	iRst = 1'b1;
	iRst = #60000 1'b0;
end 

C4Rom_vlg_sample_tst tb_sample (
	.iClk(iClk),
	.iEn(iEn),
	.iRst(iRst),
	.sampler_tx(sampler)
);

C4Rom_vlg_check_tst tb_out(
	.oData(oData),
	.sampler_rx(sampler)
);
endmodule

