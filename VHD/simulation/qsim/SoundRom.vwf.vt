// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/29/2015 15:37:21"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    SoundRom
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SoundRom_vlg_sample_tst(
	iClk,
	iEn,
	iRst,
	sampler_tx
);
input  iClk;
input  iEn;
input  iRst;
output sampler_tx;

reg sample;
time current_time;
always @(iClk or iEn or iRst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module SoundRom_vlg_check_tst (
	oDataL,
	oDataR,
	sampler_rx
);
input [15:0] oDataL;
input [15:0] oDataR;
input sampler_rx;

reg [15:0] oDataL_expected;
reg [15:0] oDataR_expected;

reg [15:0] oDataL_prev;
reg [15:0] oDataR_prev;

reg [15:0] oDataL_expected_prev;
reg [15:0] oDataR_expected_prev;

reg [15:0] last_oDataL_exp;
reg [15:0] last_oDataR_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	oDataL_prev = oDataL;
	oDataR_prev = oDataR;
end

// update expected /o prevs

always @(trigger)
begin
	oDataL_expected_prev = oDataL_expected;
	oDataR_expected_prev = oDataR_expected;
end


// expected oDataL[ 15 ]
initial
begin
	oDataL_expected[15] = 1'bX;
end 
// expected oDataL[ 14 ]
initial
begin
	oDataL_expected[14] = 1'bX;
end 
// expected oDataL[ 13 ]
initial
begin
	oDataL_expected[13] = 1'bX;
end 
// expected oDataL[ 12 ]
initial
begin
	oDataL_expected[12] = 1'bX;
end 
// expected oDataL[ 11 ]
initial
begin
	oDataL_expected[11] = 1'bX;
end 
// expected oDataL[ 10 ]
initial
begin
	oDataL_expected[10] = 1'bX;
end 
// expected oDataL[ 9 ]
initial
begin
	oDataL_expected[9] = 1'bX;
end 
// expected oDataL[ 8 ]
initial
begin
	oDataL_expected[8] = 1'bX;
end 
// expected oDataL[ 7 ]
initial
begin
	oDataL_expected[7] = 1'bX;
end 
// expected oDataL[ 6 ]
initial
begin
	oDataL_expected[6] = 1'bX;
end 
// expected oDataL[ 5 ]
initial
begin
	oDataL_expected[5] = 1'bX;
end 
// expected oDataL[ 4 ]
initial
begin
	oDataL_expected[4] = 1'bX;
end 
// expected oDataL[ 3 ]
initial
begin
	oDataL_expected[3] = 1'bX;
end 
// expected oDataL[ 2 ]
initial
begin
	oDataL_expected[2] = 1'bX;
end 
// expected oDataL[ 1 ]
initial
begin
	oDataL_expected[1] = 1'bX;
end 
// expected oDataL[ 0 ]
initial
begin
	oDataL_expected[0] = 1'bX;
end 
// expected oDataR[ 15 ]
initial
begin
	oDataR_expected[15] = 1'bX;
end 
// expected oDataR[ 14 ]
initial
begin
	oDataR_expected[14] = 1'bX;
end 
// expected oDataR[ 13 ]
initial
begin
	oDataR_expected[13] = 1'bX;
end 
// expected oDataR[ 12 ]
initial
begin
	oDataR_expected[12] = 1'bX;
end 
// expected oDataR[ 11 ]
initial
begin
	oDataR_expected[11] = 1'bX;
end 
// expected oDataR[ 10 ]
initial
begin
	oDataR_expected[10] = 1'bX;
end 
// expected oDataR[ 9 ]
initial
begin
	oDataR_expected[9] = 1'bX;
end 
// expected oDataR[ 8 ]
initial
begin
	oDataR_expected[8] = 1'bX;
end 
// expected oDataR[ 7 ]
initial
begin
	oDataR_expected[7] = 1'bX;
end 
// expected oDataR[ 6 ]
initial
begin
	oDataR_expected[6] = 1'bX;
end 
// expected oDataR[ 5 ]
initial
begin
	oDataR_expected[5] = 1'bX;
end 
// expected oDataR[ 4 ]
initial
begin
	oDataR_expected[4] = 1'bX;
end 
// expected oDataR[ 3 ]
initial
begin
	oDataR_expected[3] = 1'bX;
end 
// expected oDataR[ 2 ]
initial
begin
	oDataR_expected[2] = 1'bX;
end 
// expected oDataR[ 1 ]
initial
begin
	oDataR_expected[1] = 1'bX;
end 
// expected oDataR[ 0 ]
initial
begin
	oDataR_expected[0] = 1'bX;
end 
// generate trigger
always @(oDataL_expected or oDataL or oDataR_expected or oDataR)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected oDataL = %b | expected oDataR = %b | ",oDataL_expected_prev,oDataR_expected_prev);
	$display("| real oDataL = %b | real oDataR = %b | ",oDataL_prev,oDataR_prev);
`endif
	if (
		( oDataL_expected_prev[0] !== 1'bx ) && ( oDataL_prev[0] !== oDataL_expected_prev[0] )
		&& ((oDataL_expected_prev[0] !== last_oDataL_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataL[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataL_expected_prev);
		$display ("     Real value = %b", oDataL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oDataL_exp[0] = oDataL_expected_prev[0];
	end
	if (
		( oDataL_expected_prev[1] !== 1'bx ) && ( oDataL_prev[1] !== oDataL_expected_prev[1] )
		&& ((oDataL_expected_prev[1] !== last_oDataL_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataL[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataL_expected_prev);
		$display ("     Real value = %b", oDataL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oDataL_exp[1] = oDataL_expected_prev[1];
	end
	if (
		( oDataL_expected_prev[2] !== 1'bx ) && ( oDataL_prev[2] !== oDataL_expected_prev[2] )
		&& ((oDataL_expected_prev[2] !== last_oDataL_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataL[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataL_expected_prev);
		$display ("     Real value = %b", oDataL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oDataL_exp[2] = oDataL_expected_prev[2];
	end
	if (
		( oDataL_expected_prev[3] !== 1'bx ) && ( oDataL_prev[3] !== oDataL_expected_prev[3] )
		&& ((oDataL_expected_prev[3] !== last_oDataL_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataL[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataL_expected_prev);
		$display ("     Real value = %b", oDataL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oDataL_exp[3] = oDataL_expected_prev[3];
	end
	if (
		( oDataL_expected_prev[4] !== 1'bx ) && ( oDataL_prev[4] !== oDataL_expected_prev[4] )
		&& ((oDataL_expected_prev[4] !== last_oDataL_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataL[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataL_expected_prev);
		$display ("     Real value = %b", oDataL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oDataL_exp[4] = oDataL_expected_prev[4];
	end
	if (
		( oDataL_expected_prev[5] !== 1'bx ) && ( oDataL_prev[5] !== oDataL_expected_prev[5] )
		&& ((oDataL_expected_prev[5] !== last_oDataL_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataL[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataL_expected_prev);
		$display ("     Real value = %b", oDataL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oDataL_exp[5] = oDataL_expected_prev[5];
	end
	if (
		( oDataL_expected_prev[6] !== 1'bx ) && ( oDataL_prev[6] !== oDataL_expected_prev[6] )
		&& ((oDataL_expected_prev[6] !== last_oDataL_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataL[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataL_expected_prev);
		$display ("     Real value = %b", oDataL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oDataL_exp[6] = oDataL_expected_prev[6];
	end
	if (
		( oDataL_expected_prev[7] !== 1'bx ) && ( oDataL_prev[7] !== oDataL_expected_prev[7] )
		&& ((oDataL_expected_prev[7] !== last_oDataL_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataL[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataL_expected_prev);
		$display ("     Real value = %b", oDataL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oDataL_exp[7] = oDataL_expected_prev[7];
	end
	if (
		( oDataL_expected_prev[8] !== 1'bx ) && ( oDataL_prev[8] !== oDataL_expected_prev[8] )
		&& ((oDataL_expected_prev[8] !== last_oDataL_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataL[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataL_expected_prev);
		$display ("     Real value = %b", oDataL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oDataL_exp[8] = oDataL_expected_prev[8];
	end
	if (
		( oDataL_expected_prev[9] !== 1'bx ) && ( oDataL_prev[9] !== oDataL_expected_prev[9] )
		&& ((oDataL_expected_prev[9] !== last_oDataL_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataL[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataL_expected_prev);
		$display ("     Real value = %b", oDataL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oDataL_exp[9] = oDataL_expected_prev[9];
	end
	if (
		( oDataL_expected_prev[10] !== 1'bx ) && ( oDataL_prev[10] !== oDataL_expected_prev[10] )
		&& ((oDataL_expected_prev[10] !== last_oDataL_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataL[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataL_expected_prev);
		$display ("     Real value = %b", oDataL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oDataL_exp[10] = oDataL_expected_prev[10];
	end
	if (
		( oDataL_expected_prev[11] !== 1'bx ) && ( oDataL_prev[11] !== oDataL_expected_prev[11] )
		&& ((oDataL_expected_prev[11] !== last_oDataL_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataL[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataL_expected_prev);
		$display ("     Real value = %b", oDataL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oDataL_exp[11] = oDataL_expected_prev[11];
	end
	if (
		( oDataL_expected_prev[12] !== 1'bx ) && ( oDataL_prev[12] !== oDataL_expected_prev[12] )
		&& ((oDataL_expected_prev[12] !== last_oDataL_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataL[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataL_expected_prev);
		$display ("     Real value = %b", oDataL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oDataL_exp[12] = oDataL_expected_prev[12];
	end
	if (
		( oDataL_expected_prev[13] !== 1'bx ) && ( oDataL_prev[13] !== oDataL_expected_prev[13] )
		&& ((oDataL_expected_prev[13] !== last_oDataL_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataL[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataL_expected_prev);
		$display ("     Real value = %b", oDataL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oDataL_exp[13] = oDataL_expected_prev[13];
	end
	if (
		( oDataL_expected_prev[14] !== 1'bx ) && ( oDataL_prev[14] !== oDataL_expected_prev[14] )
		&& ((oDataL_expected_prev[14] !== last_oDataL_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataL[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataL_expected_prev);
		$display ("     Real value = %b", oDataL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oDataL_exp[14] = oDataL_expected_prev[14];
	end
	if (
		( oDataL_expected_prev[15] !== 1'bx ) && ( oDataL_prev[15] !== oDataL_expected_prev[15] )
		&& ((oDataL_expected_prev[15] !== last_oDataL_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataL[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataL_expected_prev);
		$display ("     Real value = %b", oDataL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oDataL_exp[15] = oDataL_expected_prev[15];
	end
	if (
		( oDataR_expected_prev[0] !== 1'bx ) && ( oDataR_prev[0] !== oDataR_expected_prev[0] )
		&& ((oDataR_expected_prev[0] !== last_oDataR_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataR_expected_prev);
		$display ("     Real value = %b", oDataR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oDataR_exp[0] = oDataR_expected_prev[0];
	end
	if (
		( oDataR_expected_prev[1] !== 1'bx ) && ( oDataR_prev[1] !== oDataR_expected_prev[1] )
		&& ((oDataR_expected_prev[1] !== last_oDataR_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataR_expected_prev);
		$display ("     Real value = %b", oDataR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oDataR_exp[1] = oDataR_expected_prev[1];
	end
	if (
		( oDataR_expected_prev[2] !== 1'bx ) && ( oDataR_prev[2] !== oDataR_expected_prev[2] )
		&& ((oDataR_expected_prev[2] !== last_oDataR_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataR_expected_prev);
		$display ("     Real value = %b", oDataR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oDataR_exp[2] = oDataR_expected_prev[2];
	end
	if (
		( oDataR_expected_prev[3] !== 1'bx ) && ( oDataR_prev[3] !== oDataR_expected_prev[3] )
		&& ((oDataR_expected_prev[3] !== last_oDataR_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataR_expected_prev);
		$display ("     Real value = %b", oDataR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oDataR_exp[3] = oDataR_expected_prev[3];
	end
	if (
		( oDataR_expected_prev[4] !== 1'bx ) && ( oDataR_prev[4] !== oDataR_expected_prev[4] )
		&& ((oDataR_expected_prev[4] !== last_oDataR_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataR_expected_prev);
		$display ("     Real value = %b", oDataR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oDataR_exp[4] = oDataR_expected_prev[4];
	end
	if (
		( oDataR_expected_prev[5] !== 1'bx ) && ( oDataR_prev[5] !== oDataR_expected_prev[5] )
		&& ((oDataR_expected_prev[5] !== last_oDataR_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataR_expected_prev);
		$display ("     Real value = %b", oDataR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oDataR_exp[5] = oDataR_expected_prev[5];
	end
	if (
		( oDataR_expected_prev[6] !== 1'bx ) && ( oDataR_prev[6] !== oDataR_expected_prev[6] )
		&& ((oDataR_expected_prev[6] !== last_oDataR_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataR_expected_prev);
		$display ("     Real value = %b", oDataR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oDataR_exp[6] = oDataR_expected_prev[6];
	end
	if (
		( oDataR_expected_prev[7] !== 1'bx ) && ( oDataR_prev[7] !== oDataR_expected_prev[7] )
		&& ((oDataR_expected_prev[7] !== last_oDataR_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataR_expected_prev);
		$display ("     Real value = %b", oDataR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oDataR_exp[7] = oDataR_expected_prev[7];
	end
	if (
		( oDataR_expected_prev[8] !== 1'bx ) && ( oDataR_prev[8] !== oDataR_expected_prev[8] )
		&& ((oDataR_expected_prev[8] !== last_oDataR_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataR_expected_prev);
		$display ("     Real value = %b", oDataR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oDataR_exp[8] = oDataR_expected_prev[8];
	end
	if (
		( oDataR_expected_prev[9] !== 1'bx ) && ( oDataR_prev[9] !== oDataR_expected_prev[9] )
		&& ((oDataR_expected_prev[9] !== last_oDataR_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataR_expected_prev);
		$display ("     Real value = %b", oDataR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oDataR_exp[9] = oDataR_expected_prev[9];
	end
	if (
		( oDataR_expected_prev[10] !== 1'bx ) && ( oDataR_prev[10] !== oDataR_expected_prev[10] )
		&& ((oDataR_expected_prev[10] !== last_oDataR_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataR_expected_prev);
		$display ("     Real value = %b", oDataR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oDataR_exp[10] = oDataR_expected_prev[10];
	end
	if (
		( oDataR_expected_prev[11] !== 1'bx ) && ( oDataR_prev[11] !== oDataR_expected_prev[11] )
		&& ((oDataR_expected_prev[11] !== last_oDataR_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataR[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataR_expected_prev);
		$display ("     Real value = %b", oDataR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oDataR_exp[11] = oDataR_expected_prev[11];
	end
	if (
		( oDataR_expected_prev[12] !== 1'bx ) && ( oDataR_prev[12] !== oDataR_expected_prev[12] )
		&& ((oDataR_expected_prev[12] !== last_oDataR_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataR[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataR_expected_prev);
		$display ("     Real value = %b", oDataR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oDataR_exp[12] = oDataR_expected_prev[12];
	end
	if (
		( oDataR_expected_prev[13] !== 1'bx ) && ( oDataR_prev[13] !== oDataR_expected_prev[13] )
		&& ((oDataR_expected_prev[13] !== last_oDataR_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataR[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataR_expected_prev);
		$display ("     Real value = %b", oDataR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oDataR_exp[13] = oDataR_expected_prev[13];
	end
	if (
		( oDataR_expected_prev[14] !== 1'bx ) && ( oDataR_prev[14] !== oDataR_expected_prev[14] )
		&& ((oDataR_expected_prev[14] !== last_oDataR_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataR[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataR_expected_prev);
		$display ("     Real value = %b", oDataR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oDataR_exp[14] = oDataR_expected_prev[14];
	end
	if (
		( oDataR_expected_prev[15] !== 1'bx ) && ( oDataR_prev[15] !== oDataR_expected_prev[15] )
		&& ((oDataR_expected_prev[15] !== last_oDataR_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oDataR[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oDataR_expected_prev);
		$display ("     Real value = %b", oDataR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oDataR_exp[15] = oDataR_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module SoundRom_vlg_vec_tst();
// constants                                           
// general purpose registers
reg iClk;
reg iEn;
reg iRst;
// wires                                               
wire [15:0] oDataL;
wire [15:0] oDataR;

wire sampler;                             

// assign statements (if any)                          
SoundRom i1 (
// port map - connection between master ports and signals/registers   
	.iClk(iClk),
	.iEn(iEn),
	.iRst(iRst),
	.oDataL(oDataL),
	.oDataR(oDataR)
);

// iClk
always
begin
	iClk = 1'b0;
	iClk = #10000 1'b1;
	#10000;
end 

// iEn
initial
begin
	iEn = 1'b0;
	iEn = #80000 1'b1;
end 

// iRst
initial
begin
	iRst = 1'b1;
	iRst = #80000 1'b0;
end 

SoundRom_vlg_sample_tst tb_sample (
	.iClk(iClk),
	.iEn(iEn),
	.iRst(iRst),
	.sampler_tx(sampler)
);

SoundRom_vlg_check_tst tb_out(
	.oDataL(oDataL),
	.oDataR(oDataR),
	.sampler_rx(sampler)
);
endmodule

