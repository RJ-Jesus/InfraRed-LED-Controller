library IEEE;
use IEEE.STD_LOGIC_1164.all;

entity AudioLogicUnit is
  port(iClk         : in std_logic;
       iRst         : in std_logic;
       iCounterEn   : in std_logic;
       iAudioCode   : in std_logic_vector(1 downto 0);
       oLeftSample  : out std_logic_vector(15 downto 0);
       oRightSample : out std_logic_vector(15 downto 0));
end AudioLogicUnit;

architecture RTL of AudioLogicUnit is
  signal TieRst, WinningRst : std_logic := '1';
  signal sTie, sWinning : std_logic_vector(15 downto 0) := (others => '0');
begin
  if(rising_edge(iClk)) then
    if(iRst = '1') then
      iCounterEn <= '0';
      oLeftSample  <= (others => '0');
      oRightSample <= (others => '0');
    else
      case iAudioCode is
      --The two channels have to be different if a real music is played!
        when "01" or "10" =>
          TieRst     <= '1';
          WinningRst <= '0';
          oLeftSample  <= sWinning;
          oRightSample <= sWinning;
        when "11" =>
          TieRst     <= '0';
          WinningRst <= '1';
          oLeftSample  <= sTie;
          oRIghtSample <= sTie;
        when others =>
          TieRst     <= '1';
          WinningRst <= '1';
          oLeftSample  <= (others => '0');
          oRightSample <= (others => '0');
      end case;
    end if;
  end process;
  --Instancing of ROMs
  Winning: entity work.C4Rom(RTL)
    port map(iClk  => iClk,
             iRst  => iRst or WinningRst,
             iEn   => iConuterEn,
             oData => sWinning);
  Tie: entity work.E4Rom(RTL)
    port map(iClk  => iClk,
             iRst  => iRst or TieRst,
             iEn   => iConuterEn,
             oData => sTie);
end RTL;